org: aaronbush07
app: webhook-backend
service: webhook-backend
frameworkVersion: "2"

provider:
  name: aws
  region: ap-southeast-2
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"
  iam: 
    role: 
      statements: 
        - Effect: 'Allow'
          Action: 
            - 'SNS:Publish'
          Resource: { "Fn::Join": ["", ["arn:aws:sns:${self:provider.region}:", {"Ref": "AWS::AccountId"}, ":${self:service}-topic"]]}
        - Effect: 'Allow'
          Action: 
            - 's3:PutObject'
            - 's3:ListBucket'
            - 's3:HeadObject'
            - 's3:GetObject'
          Resource: "arn:aws:s3:::seven-s3-bucket/*"

functions:
  auth: 
    handler: lambdas/authorizer.handler
  token: 
    handler: lambdas/token.handler
    events: 
      - http:
         path: token
         method: get
  seven:
    handler: lambdas/event.handler
    custom: 
      env-resources: 
        - SNSTopic
        - S3Bucket
    events:
      - http:
         path: seven
         method: post
         authorizer: 
           name: auth
         cors: 
           origin: '*'

resources: 
  Resources: 
    SNSTopic: 
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Seven Events
        TopicName: ${self:service}-topic
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: PublicRead
        BucketName: seven-s3-bucket

plugins:
  - serverless-offline
  - serverless-resources-env